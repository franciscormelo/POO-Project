package antColony;

import java.util.Random;

import graph.Graph;
import simulator.Event;
import simulator.PEC;

/**
 * Class related to the pheromone evaporation event.
 * @author Group 33
 *
 */

class PheromoneEvaporation extends Event {

	/**
	 * Class Graph
	 */
	public Graph graph;
	/**
	 * Class Data
	 */
	public Data data;
	/**
	 * Class Ant
	 */
	public Ant ant;

	/**
	 * Adjacent nodes of the edge to be evaporated
	 */
	public int n1, n2;

	/**
	 * Random Class
	 */
	static Random random = new Random();

	/**
	 * Pheromone Evaporation Constructor. Receives: <p> The time of the event, an object of type Ant,
	 * an object of type Graph, an object of type Data and two adjacent nodes.
	 * @param time Time of the event
	 * @param ant Object of type Ant
	 * @param graph Object of type Graph
	 * @param data Object of type Data
	 * @param n1 Node number 1
	 * @param n2 Node number 2
	 */
	public PheromoneEvaporation(double time, Ant ant, Graph graph, Data data, int n1, int n2) {
		super(time);
		this.graph = graph;
		this.data = data;
		this.n1 = n1;
		this.n2 = n2;
		this.ant = ant;
	}


	/* (non-Javadoc)
	 * @see simulator.Event#simulateEvent(simulator.PEC)
	 */
	@Override
	public void simulateEvent(PEC pec) {
		
		if (!(graph.plevelBetween(n1, n2) == 0)) {

			graph.decrementPheromones(n1, n2, data.rho);

			double nextTime = time + expRandom(data.eta);

			if (nextTime <= data.finalinst) {
				pec.addEvPEC(new PheromoneEvaporation(nextTime, ant, graph, data, n1, n2));	
			}
		}

	}

	/* (non-Javadoc)
	 * @see simulator.IEvent#getTime()
	 */
	@Override
	public double getTime() {
		return time;
	}


	/**
	 * Returns an exponential random variable generated by using 
	 * the inverse of the cumulative distribution function with mean the values received as parameter.
	 * @param mean Mean value
	 * @return Random variable observation
	 */
	private static double expRandom(double mean) {

		double next = random.nextDouble();
		return -mean*Math.log(1.0-next);
	}

}
